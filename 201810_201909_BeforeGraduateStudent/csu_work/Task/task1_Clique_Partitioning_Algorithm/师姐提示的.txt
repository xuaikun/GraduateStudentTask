还是以昨天的图为例，{1，2}合并为1个点，用1代替1，2，删除的边是{1，2}，{2，3}，{2，4}，删除的边是1）合并的两点所对应的边，即{1，2}；2）索引号大的点与common neighbor相连的边，即{2，3}；3）图中仅与目前考虑的两点中的一个点相连的边，即{2，4}

昨天的论文上，它首先合并的是{2，3}，因为{2，3}的common neighbor最大，虽然{3，4}也最大，在common neighbor一样时，选择度最大的那一组，如果连度也一样，就随意选，论文中的情况是度也一样大，所以随意选的{2，3}，合并{2，3}后需要删除的边是{2，3}（对应前一条信息中的情况1）），{1，3}（对应前一条信息中的2）），{3，4}（对应前一条信息中的2）），{3，5}（对应前一条信息中的3）），经过边删除后得到的图就像图c中所述的边一样了，还剩{1，2}，{2，4}，{4，5}，{6，7}，{7，8}，{7，9}
这就是算法的全过程
重复这一过程直到没有边存在了
